import os
import random
import time

# –§–∞–π–ª –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
COUNTER_FILE = "participants_count.txt"

# üóÇÔ∏è –û–ì–†–û–ú–ù–ê–Ø –ë–ê–ó–ê –í–û–ü–†–û–°–û–í (30+)
QUESTIONS_DB = [
    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–†–û–í–ï–ù–¨ 1: –ù–û–í–ò–ß–û–ö ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 1, "text": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Python?", "answers": ["#"]},
    {"level": 1, "text": "–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤ Python?", "answers": ["print"]},
    {"level": 1, "text": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞?", "answers": ["int"]},
    {"level": 1, "text": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫?", "answers": ["[]", "list()"]},
    {"level": 1, "text": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è '—Ä–∞–≤–Ω–æ'?", "answers": ["=="]},

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–†–û–í–ï–ù–¨ 2: –î–ñ–£–ù ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 2, "text": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π: list –∏–ª–∏ tuple?", "answers": ["tuple"]},
    {"level": 2, "text": "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ Python?", "answers": ["def"]},
    {"level": 2, "text": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç: len('hello')?", "answers": ["5"]},
    {"level": 2, "text": "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞?", "answers": ["append"]},
    {"level": 2, "text": "–ö–∞–∫–æ–π –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º?", "answers": ["datetime"]},

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–†–û–í–ï–ù–¨ 3: –ú–ò–î–õ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 3, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ PEP 8?", "answers": ["—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "—Å—Ç–∏–ª—å", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "pep8"]},
    {"level": 3, "text": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ Python?", "answers": ["venv", "python -m venv"]},
    {"level": 3, "text": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç: [1, 2, 3] * 2?", "answers": ["[1, 2, 3, 1, 2, 3]"]},
    {"level": 3, "text": "–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Python?", "answers": ["try", "except"]},
    {"level": 3, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ list comprehension? –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä.", "answers": ["[", "]"]},

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–†–û–í–ï–ù–¨ 4: –°–ï–ù–¨–û–† ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 4, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤ Python?", "answers": ["–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä", "@"]},
    {"level": 4, "text": "–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è 'is' –æ—Ç '=='?", "answers": ["id", "–æ–±—ä–µ–∫—Ç", "—Å—Å—ã–ª–∫–∞", "is —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã"]},
    {"level": 4, "text": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç GIL (Global Interpreter Lock)?", "answers": ["gil", "–ø–æ—Ç–æ–∫", "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–æ–¥–∏–Ω –ø–æ—Ç–æ–∫"]},
    {"level": 4, "text": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç: a = [1]; b = a; b.append(2); print(a)?", "answers": ["[1, 2]"]},
    {"level": 4, "text": "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º?", "answers": ["__iter__", "__next__"]},

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£–†–û–í–ï–ù–¨ 5: –≠–ö–°–ü–ï–†–¢ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 5, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∞–∫–ª–∞—Å—Å –≤ Python?", "answers": ["metaclass", "–∫–ª–∞—Å—Å –∫–ª–∞—Å—Å–∞"]},
    {"level": 5, "text": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç asyncio –∏ event loop?", "answers": ["–∞—Å–∏–Ω—Ö—Ä–æ–Ω", "async", "await", "event loop"]},
    {"level": 5, "text": "–ß–µ–º __new__ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç __init__?", "answers": ["__new__", "—Å–æ–∑–¥–∞–Ω–∏–µ", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"]},
    {"level": 5, "text": "–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –ø–∞–º—è—Ç—å –≤ Python (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞–ª—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)?", "answers": ["–∫—ç—à", "-5 –¥–æ 256", "–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"]},
    {"level": 5, "text": "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å singleton –≤ Python?", "answers": ["singleton", "__new__", "–º–µ—Ç–∞–∫–ª–∞—Å—Å"]},

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ü–†–û–°–´ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    {"level": 2, "text": "–ö–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å json?", "answers": ["import json"]},
    {"level": 3, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ *args –∏ **kwargs?", "answers": ["args", "kwargs", "–∞—Ä–≥—É–º–µ–Ω—Ç—ã"]},
    {"level": 4, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä? –ö–∞–∫ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å?", "answers": ["with", "__enter__", "__exit__"]},
    {"level": 3, "text": "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è?", "answers": ["open", "r"]},
    {"level": 5, "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ descriptor –≤ Python?", "answers": ["descriptor", "__get__", "__set__"]},
    {"level": 4, "text": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ MRO?", "answers": ["mro", "–º–µ—Ç–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", "C3"]},
    {"level": 3, "text": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç: bool([])?", "answers": ["False"]},
]

def load_counter():
    if os.path.exists(COUNTER_FILE):
        with open(COUNTER_FILE, "r", encoding="utf-8") as f:
            try:
                return int(f.read().strip())
            except:
                return 0
    return 0

def save_counter(count):
    with open(COUNTER_FILE, "w", encoding="utf-8") as f:
        f.write(str(count))

def is_answer_correct(user_answer, correct_answers):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ."""
    user = user_answer.strip().lower()
    return any(correct.lower() in user for correct in correct_answers)

def print_certificate(name, level_title, score, max_score, participant_num):
    border = "=" * 60
    percent = (score / max_score) * 100
    print(f"\n{border}")
    print("                üèÜ –û–§–ò–¶–ò–ê–õ–¨–ù–ê–Ø –ì–†–ê–ú–û–¢–ê üèÜ")
    print(border)
    print(f"–ò–º—è: {name}")
    print(f"–ó–≤–∞–Ω–∏–µ: {level_title}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score} / {max_score} ({percent:.0f}%)")
    print(f"–¢—ã ‚Äî {participant_num}-–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ç–µ—Å—Ç–∞!")
    print(border)
    emojis = {
        "–ü–∏—Ç–æ–Ω-–ú–∞–≥–∏—Å—Ç—Ä": "üßô‚Äç‚ôÇÔ∏è –¢—ã ‚Äî –ª–µ–≥–µ–Ω–¥–∞ Python!",
        "–°–µ–Ω—å–æ—Ä": "üß† –¢—ã —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏–µ –º–µ—á—Ç–∞—é—Ç.",
        "–ú–∏–¥–ª": "üöÄ –¢—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–∏—à–µ—à—å –∫–æ–¥ –∏ —É—á–∏—à—å –¥—Ä—É–≥–∏—Ö.",
        "–î–∂—É–Ω": "üå± –¢—ã —Ä–∞—Å—Ç—ë—à—å –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "–ù–æ–≤–∏—á–æ–∫": "üê£ –¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä Python ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ!"
    }
    print(emojis.get(level_title, "üêç –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏!"))
    print(border)

def main():
    # –°—á—ë—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total = load_counter() + 1
    save_counter(total)

    print("üêç –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í ¬´–û–ü–†–ï–î–ï–õ–ò–¢–ï–õ–¨ –£–†–û–í–ù–Ø PYTHON¬ª! üêç")
    name = input("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? > ").strip() or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ü–∏—Ç–æ–Ω–∏—Å—Ç"
    print(f"\n–ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã ‚Äî {total}-–π —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞!")
    print("–¢–µ–±–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–æ–ª—å—à–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n")

    # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤—Å–µ–π –±–∞–∑—ã
    selected_questions = random.sample(QUESTIONS_DB, k=5)

    score = 0
    for i, q in enumerate(selected_questions, 1):
        print(f"\n–í–æ–ø—Ä–æ—Å {i}/5 (—É—Ä–æ–≤–µ–Ω—å {q['level']}):")
        print(q["text"])
        user_ans = input("> ")
        if is_answer_correct(user_ans, q["answers"]):
            print("‚úÖ –í–µ—Ä–Ω–æ!")
            score += 1
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ù–æ —ç—Ç–æ –æ–ø—ã—Ç!")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if score == 5:
        title = "üßô‚Äç‚ôÇÔ∏è –ü–∏—Ç–æ–Ω-–ú–∞–≥–∏—Å—Ç—Ä"
    elif score == 4:
        title = "üß† –°–µ–Ω—å–æ—Ä"
    elif score == 3:
        title = "üöÄ –ú–∏–¥–ª"
    elif score == 2:
        title = "üå± –î–∂—É–Ω"
    else:
        title = "üê£ –ù–æ–≤–∏—á–æ–∫"

    # –ê–Ω–∏–º–∞—Ü–∏—è
    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", end="", flush=True)
    for _ in range(3):
        time.sleep(0.4)
        print(".", end="", flush=True)
    time.sleep(0.3)

    # –ì—Ä–∞–º–æ—Ç–∞
    print_certificate(name, title, score, 5, total)

if __name__ == "__main__":
    main()